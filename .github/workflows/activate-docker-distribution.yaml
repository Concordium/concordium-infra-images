name: Activate docker distribution
run-name: Creating Docker tag ${{ inputs.destination_image_tag }} from source ${{ inputs.source_image_tag }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The name of the environment for the node"
        type: choice
        options:
          - stagenet
          - testnet
          - mainnet
        default: "stagenet"
      source_image_tag:
        description: "The tag that should be renamed"
        required: true
        type: string
      destination_image_tag:
        description: "The new tag name"
        type: string
      set_latest:
        description: "Should latest tag be assigned to this image"
        type: boolean
        default: true
      delete_source:
        description: "Should the old tag be deleted"
        type: boolean
        default: false

env:
  IMAGE: "concordium/${{ inputs.environment }}-node"

jobs:
  # This workflow needs approval - let's make it so a reviewer can see the input parameters.
  print-input-params:
    runs-on: ubuntu-latest
    steps:
      - name: Display parameters this workflow was called with
        shell: bash
        run:
          printf '|Parameter|Value|\n|------|------|\n' >> $GITHUB_STEP_SUMMARY &&
          jq -r 'to_entries | map("|\(.key)|\(.value)|") | join("\n") | @text' <<< '${{tojson(inputs)}}' | sed 's/\\n/\n/g' >> $GITHUB_STEP_SUMMARY

  update-docker-tag:
    runs-on: ubuntu-latest
    environment: rename-tags
    steps:
      - name: "dockerhub-login"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Checking source tag ${{ inputs.source_image_tag }} exists"
        run: |
          set +e
          docker manifest inspect "${{ env.IMAGE }}:${{ inputs.source_image_tag }}"
          EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 1 ]]; then
            echo "::error:: image ${{ env.IMAGE }}:${{ inputs.source_image_tag }} does not exist"
            exit 1
          elif [[ $EXIT_CODE -ne 0 ]]; then
            echo "::error:: exit code: $EXIT_CODE"
            exit 1
          fi

      - name: "Checking destination tag ${{ inputs.destination_image_tag }} does not already exist"
        run: |
          set +e
          docker manifest inspect "${{ env.IMAGE }}:${{ inputs.destination_image_tag }}"
          EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 0 ]]; then
            echo "::error:: image ${{ env.IMAGE }}:${{ inputs.destination_image_tag }} already exist"
            exit 1
          elif [[ $EXIT_CODE -ne 1 ]]; then
            echo "::error:: $EXIT_CODE"
            exit 1
          fi

      - name: "Pull source image"
        run: |
          set +e
          docker pull "${{ env.IMAGE }}:${{ inputs.source_image_tag }}"

      - name: "Push image with latest tag if selected"
        if: ${{ inputs.set_latest == true }}
        run: |
          set +e
          docker pull "${{ env.IMAGE }}:${{ inputs.source_image_tag }}"
          TAG="${{ env.IMAGE }}:latest"
          docker image tag "${{ env.IMAGE }}:${{ inputs.source_image_tag }}" $TAG
          docker push $TAG

      - name: "Create new tag from user input"
        if: ${{ inputs.destination_image_tag != false }}
        run: |
          set +e
          TAG="${{ env.IMAGE }}:${{ inputs.destination_image_tag }}"
          docker image tag "${{ env.IMAGE }}:${{ inputs.source_image_tag }}" $TAG
          docker push $TAG

      - name: "Delete source image if selected"
        if: ${{ inputs.delete_source == true }}
        # API path structure for image tags is like this: https://hub.docker.com/v2/repositories/concordium/stagenet-node/tags/9.0.7-3
        run: |
          TOKEN=`curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKERHUB_USERNAME}}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\"}" "https://hub.docker.com/v2/users/login/" | jq -r .token`
          curl "https://hub.docker.com/v2/repositories/concordium/${{ inputs.environment }}-node/tags/${{ inputs.source_image_tag }}/" -X DELETE -H "Authorization: JWT $TOKEN"

